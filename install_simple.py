#!/usr/bin/env python3
"""
Installateur simple pour Dual AI Orchestrator
Compatible avec les environnements Python g√©r√©s (PEP 668)
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def main():
    print("üöÄ Installation simple de Dual AI Orchestrator")
    print("=" * 60)
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    
    # R√©pertoires
    project_root = Path(__file__).parent
    home_dir = Path.home()
    config_dir = home_dir / ".dual-ai"
    venv_dir = config_dir / "venv"
    bin_dir = home_dir / ".local" / "bin"
    
    # Cr√©er les r√©pertoires
    config_dir.mkdir(exist_ok=True)
    bin_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"üìÅ Configuration: {config_dir}")
    print(f"üìÅ Binaires: {bin_dir}")
    
    # √âtape 1: Cr√©er l'environnement virtuel
    print("\nüì¶ Cr√©ation de l'environnement virtuel...")
    
    if venv_dir.exists():
        print("‚ö†Ô∏è  Environnement virtuel existant d√©tect√©")
        response = input("Recr√©er l'environnement ? [O/n]: ").lower()
        if response in ['', 'o', 'oui', 'y', 'yes']:
            shutil.rmtree(venv_dir)
        else:
            print("Conservation de l'environnement existant")
    
    if not venv_dir.exists():
        result = subprocess.run([sys.executable, "-m", "venv", str(venv_dir)])
        if result.returncode != 0:
            print("‚ùå Impossible de cr√©er l'environnement virtuel")
            sys.exit(1)
        print("‚úÖ Environnement virtuel cr√©√©")
    
    # D√©terminer les chemins dans le venv
    if sys.platform == "win32":
        venv_python = venv_dir / "Scripts" / "python.exe"
        venv_pip = venv_dir / "Scripts" / "pip.exe"
    else:
        venv_python = venv_dir / "bin" / "python"
        venv_pip = venv_dir / "bin" / "pip"
    
    # √âtape 2: Installer les d√©pendances
    print("\nüì¶ Installation des d√©pendances...")
    
    # Mettre √† jour pip
    subprocess.run([str(venv_python), "-m", "pip", "install", "--upgrade", "pip"], 
                   capture_output=True)
    
    # Installer les d√©pendances
    requirements_file = project_root / "requirements.txt"
    result = subprocess.run([str(venv_pip), "install", "-r", str(requirements_file)])
    
    if result.returncode != 0:
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        sys.exit(1)
    
    print("‚úÖ D√©pendances install√©es")
    
    # √âtape 3: Installer l'application
    print("\nüì¶ Installation de l'application...")
    
    result = subprocess.run([str(venv_pip), "install", "-e", str(project_root)])
    
    if result.returncode != 0:
        print("‚ùå Erreur lors de l'installation de l'application")
        sys.exit(1)
    
    print("‚úÖ Application install√©e")
    
    # √âtape 4: Cr√©er le script wrapper
    print("\nüîß Cr√©ation du script wrapper...")
    
    if sys.platform == "win32":
        wrapper_path = bin_dir / "dual-ai.bat"
        wrapper_content = f'''@echo off
"{venv_python}" -m dual_ai.main %*
'''
    else:
        wrapper_path = bin_dir / "dual-ai"
        wrapper_content = f'''#!/bin/bash
"{venv_python}" -m dual_ai.main "$@"
'''
    
    wrapper_path.write_text(wrapper_content)
    
    if sys.platform != "win32":
        wrapper_path.chmod(0o755)
    
    print(f"‚úÖ Wrapper cr√©√©: {wrapper_path}")
    
    # √âtape 5: Copier la configuration
    print("\n‚öôÔ∏è  Configuration...")
    
    config_source = project_root / "config" / "config.yaml"
    config_dest = config_dir / "config.yaml"
    
    if not config_dest.exists() and config_source.exists():
        shutil.copy2(config_source, config_dest)
        print(f"‚úÖ Configuration copi√©e: {config_dest}")
    
    # √âtape 6: V√©rifications finales
    print("\nüß™ Tests...")
    
    # Test d'import
    try:
        result = subprocess.run([str(venv_python), "-c", "import dual_ai; print('Import OK')"], 
                               capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Import r√©ussi")
        else:
            print("‚ùå Erreur d'import")
    except:
        print("‚ö†Ô∏è  Impossible de tester l'import")
    
    # Test de la commande
    try:
        result = subprocess.run([str(wrapper_path), "--version"], 
                               capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ Commande fonctionnelle")
        else:
            print("‚ùå Erreur de commande")
    except:
        print("‚ö†Ô∏è  Impossible de tester la commande")
    
    # Instructions finales
    print("\n" + "üéâ INSTALLATION TERMIN√âE !" + "\n")
    print("Pour utiliser Dual AI Orchestrator:")
    print(f"1. Ajoutez {bin_dir} √† votre PATH:")
    
    if sys.platform == "win32":
        print(f'   set PATH=%PATH%;{bin_dir}')
    else:
        shell_config = get_shell_config()
        print(f'   echo \'export PATH="$PATH:{bin_dir}"\' >> {shell_config}')
        print(f'   source {shell_config}')
    
    print("\n2. Red√©marrez votre terminal")
    print("\n3. Lancez: dual-ai")
    
    print(f"\nConfiguration: {config_dir}")
    print(f"Logs: {config_dir}/logs")
    print(f"Solutions: {config_dir}/solutions")
    
    print("\nüìö Documentation:")
    print("- README.md : Guide de d√©marrage")
    print("- docs/usage.md : Guide d'utilisation d√©taill√©")
    print("- docs/troubleshooting.md : R√©solution de probl√®mes")

def get_shell_config():
    """D√©termine le fichier de configuration du shell"""
    shell = os.environ.get('SHELL', '').lower()
    home = Path.home()
    
    if 'zsh' in shell:
        return home / '.zshrc'
    elif 'bash' in shell:
        for config in ['.bash_profile', '.bashrc']:
            config_path = home / config
            if config_path.exists():
                return config_path
        return home / '.bashrc'
    else:
        return home / '.profile'

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Installation annul√©e")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erreur: {e}")
        sys.exit(1)